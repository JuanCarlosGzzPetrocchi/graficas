//
//  main.cpp
//  TextureMappingWRGBACheckers
//
//  Created by Ruben Garza on 10/24/18.
//  Copyright Â© 2018 Ruben Garza. All rights reserved.
//

/*
 * Texture mapping with RGBA Checkers Texture
 */

#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
//#include <GL/glut.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>

/*  Create checkerboard texture  */
#define checkImageWidth 64
#define checkImageHeight 64
static GLubyte checkImage[checkImageHeight][checkImageWidth][4];

// angle of rotation for the camera direction
float angle=0.0;
// actual vector representing the camera's direction
float lx=0.0f,lz=-1.0f;
// XZ position of the camera
float x=0.0f,z=5.0f;
int depth = 0, max_depth = 5;
float length = 5;
float tempLength;
float r;

void makeCheckImage(void)
{
    int i, j, c;
    
    //Generating Checker Patterm
    for (i = 0; i < checkImageHeight; i++) {
        for (j = 0; j < checkImageWidth; j++) {
            c = ((((i&0x8)==0)^((j&0x8))==0))*255;
            checkImage[i][j][0] = (GLubyte) c;
            checkImage[i][j][1] = (GLubyte) c;
            checkImage[i][j][2] = (GLubyte) c;
            checkImage[i][j][3] = (GLubyte) 255;
        }
    }
}

void init(void)
{
    glEnable(GL_DEPTH_TEST); //Para que no se transparente la textura
    
    makeCheckImage();
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER,GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,GL_NEAREST);
    /*glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, checkImageWidth,
     checkImageHeight, 0, GL_RGBA, GL_UNSIGNED_BYTE,
     checkImage);*/
    gluBuild2DMipmaps(GL_TEXTURE_2D,1,checkImageWidth,checkImageHeight,GL_RGBA,GL_UNSIGNED_BYTE,checkImage);
    
}

void ArbolFractal(float x, float y, float z, int depth) {
    
    if (max_depth == depth) {
    }
    else{
        if (x == 0.0 & y == 0.0 && z == 0.0) {
            glColor3f(155/255, 75/255, 1.0f);
            glBegin(GL_LINES);
            glVertex3f(0.0f, 0.0f, 0.0f);
            glVertex3f(0.0f, length, 0.0f);
            glEnd();
            depth++;
            ArbolFractal(0.0, 5.0, 0.0, depth);
        }
        else{
            //primera rama
            glColor3f(0.0, 1.0, 0.0);
            glBegin(GL_LINES);
            glVertex3f(x, length, z);
            r = static_cast <float> (rand()) / static_cast <float> (RAND_MAX);
            // y = y + (y * r);
            tempLength = length/2;
            glVertex3f(x, length+tempLength, z+tempLength);
            glEnd();
            ArbolFractal(x, y, z, depth+1);
            ArbolFractal(x, y, z, depth+1);
            
            //segunda rama
            glColor3f(0.0, 1.0, 0.0);
            glBegin(GL_LINES);
            glVertex3f(x, length, z);
            r = static_cast <float> (rand()) / static_cast <float> (RAND_MAX);
            // y = y + (y * r);
            tempLength = length/2;
            glVertex3f(x, length+tempLength, z-tempLength);
            glEnd();
            ArbolFractal(x, y, z, depth+1);
            ArbolFractal(x, y, z, depth+1);
        }
    }
    
}

void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    glLoadIdentity();
    
    gluLookAt(    x, 1.0f, z,
              x+lx, 1.0f,  z+lz,
              0.0f, 1.0f,  0.0f);
    
    glColor3f(0.9f, 0.9f, 0.9f);
    glBegin(GL_QUADS);
    glVertex3f(-100.0f, 0.0f, -100.0f);
    glVertex3f(-100.0f, 0.0f,  100.0f);
    glVertex3f( 100.0f, 0.0f,  100.0f);
    glVertex3f( 100.0f, 0.0f, -100.0f);
    glEnd();
    
    // Draw 36 FractalTrees
    for(int i = -3; i < 3; i++)
        for(int j=-3; j < 3; j++) {
            glPushMatrix();
            glTranslatef(i*10.0,0,j * 10.0);
            ArbolFractal(0.0, 0.0, 0.0, depth);
            glPopMatrix();
        }
    
    glutSwapBuffers();
    
    glutSwapBuffers();
}

void reshape(int w, int h)
{
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glViewport(0, 0, (GLsizei) w, (GLsizei) h);
    gluPerspective(60.0, (GLfloat) w/(GLfloat) h, 1.0, 100.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void keyboard (unsigned char key, int x, int y)
{
    float fraction = 1.0f;
    switch (key) {
        case 27:
            exit(0);
            break;
        case 'w':
            x += lx * fraction;
            z += lz * fraction;
            break;
        case 'a':
            angle -= 0.1f;
            lx = sin(angle);
            lz = -cos(angle);
            break;
        case 's':
            x -= lx * fraction;
            z -= lz * fraction;
            break;
        case 'd':
            angle += 0.1f;
            lx = sin(angle);
            lz = -cos(angle);
            break;
        case 'q':
            exit(0);
            break;
        case 'e':
            exit(0);
            break;
        default:
            break;
    }
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(250, 250);
    glutInitWindowPosition(100, 100);
    glutCreateWindow(argv[0]);
    init();
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glutIdleFunc(display);
    glutMainLoop();
    return 0;
}
